{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\n\nvar AnimatedConcat = function (_AnimatedNode) {\n  _inherits(AnimatedConcat, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedConcat);\n\n  function AnimatedConcat(input) {\n    var _this;\n\n    _classCallCheck(this, AnimatedConcat);\n\n    invariant(input.every(function (el) {\n      return el instanceof AnimatedNode || typeof el === 'number' || typeof el === 'string';\n    }), \"Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: \".concat(input));\n    _this = _super.call(this, {\n      type: 'concat',\n      input: input\n    }, input);\n    _this._input = input;\n    return _this;\n  }\n\n  _createClass(AnimatedConcat, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._input.reduce(function (prev, current) {\n        return prev + val(current);\n      }, '');\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedConcat, id: \".concat(this.__nodeID);\n    }\n  }]);\n\n  return AnimatedConcat;\n}(AnimatedNode);\n\nexport function createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new AnimatedConcat(args.map(adapt));\n}","map":{"version":3,"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT;AACA,OAAOC,YAAP;AACA,SAASC,GAAT;;IAEMC,c;;;;;EACJC,wBAAYC,KAAZD,EAAmB;IAAA;;IAAA;;IACjBL,SAAS,CACPM,KAAK,CAACC,KAAND,CACEE,YAAE;MAAA,OACAA,EAAE,YAAYN,YAAdM,IACA,OAAOA,EAAP,KAAc,QADdA,IAEA,OAAOA,EAAP,KAAc,QAHd;IAAA,CADJF,CADO,2JAO2IA,KAP3I,EAATN;IASA,0BAAM;MAAES,IAAI,EAAE,QAAR;MAAkBH;IAAlB,CAAN,EAAiCA,KAAjC;IACA,MAAKI,MAAL,GAAcJ,KAAd;IAXiB;EAYlB;;;;WAEDK,wBAAe;MACb,OAAO,KAAKD,MAAL,CAAYE,MAAZ,CAAmB,UAACC,IAAD,EAAOC,OAAP;QAAA,OAAmBD,IAAI,GAAGV,GAAG,CAACW,OAAD,CAA7B;MAAA,CAAnB,EAA2D,EAA3D,CAAP;IACD;;;WAEDC,oBAAW;MACT,qCAA8B,KAAKC,QAAnC;IACD;;;;EArB0Bd,Y;;AAwB7B,OAAO,SAASe,oBAAT,GAAuC;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EAC5C,OAAO,IAAId,cAAJ,CAAmBc,IAAI,CAACC,GAALD,CAASjB,KAATiB,CAAnB,CAAP;AACD","names":["invariant","adapt","AnimatedNode","val","AnimatedConcat","constructor","input","every","el","type","_input","__onEvaluate","reduce","prev","current","toString","__nodeID","createAnimatedConcat","args","map"],"sources":["AnimatedConcat.js"],"sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}