{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\n\nfunction reduce(fn) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn(val(a), val(b));\n    });\n  };\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn(val(a), val(b));\n    }, initialValue);\n  };\n}\n\nfunction infix(fn) {\n  return function (input) {\n    return fn(val(input[0]), val(input[1]));\n  };\n}\n\nfunction single(fn) {\n  return function (input) {\n    return fn(val(input[0]));\n  };\n}\n\nvar OPERATIONS = {\n  add: reduce(function (a, b) {\n    return a + b;\n  }),\n  sub: reduce(function (a, b) {\n    return a - b;\n  }),\n  multiply: reduce(function (a, b) {\n    return a * b;\n  }),\n  divide: reduce(function (a, b) {\n    return a / b;\n  }),\n  pow: reduce(function (a, b) {\n    return Math.pow(a, b);\n  }),\n  modulo: reduce(function (a, b) {\n    return (a % b + b) % b;\n  }),\n  sqrt: single(function (a) {\n    return Math.sqrt(a);\n  }),\n  log: single(function (a) {\n    return Math.log(a);\n  }),\n  sin: single(function (a) {\n    return Math.sin(a);\n  }),\n  cos: single(function (a) {\n    return Math.cos(a);\n  }),\n  tan: single(function (a) {\n    return Math.tan(a);\n  }),\n  acos: single(function (a) {\n    return Math.acos(a);\n  }),\n  asin: single(function (a) {\n    return Math.asin(a);\n  }),\n  atan: single(function (a) {\n    return Math.atan(a);\n  }),\n  exp: single(function (a) {\n    return Math.exp(a);\n  }),\n  round: single(function (a) {\n    return Math.round(a);\n  }),\n  abs: single(function (a) {\n    return Math.abs(a);\n  }),\n  ceil: single(function (a) {\n    return Math.ceil(a);\n  }),\n  floor: single(function (a) {\n    return Math.floor(a);\n  }),\n  max: reduce(function (a, b) {\n    return Math.max(a, b);\n  }),\n  min: reduce(function (a, b) {\n    return Math.min(a, b);\n  }),\n  and: reduceFrom(function (a, b) {\n    return a && b;\n  }, true),\n  or: reduceFrom(function (a, b) {\n    return a || b;\n  }, false),\n  not: single(function (a) {\n    return !a;\n  }),\n  defined: single(function (a) {\n    return a !== null && a !== undefined && !isNaN(a);\n  }),\n  lessThan: infix(function (a, b) {\n    return a < b;\n  }),\n  eq: infix(function (a, b) {\n    return a == b;\n  }),\n  greaterThan: infix(function (a, b) {\n    return a > b;\n  }),\n  lessOrEq: infix(function (a, b) {\n    return a <= b;\n  }),\n  greaterOrEq: infix(function (a, b) {\n    return a >= b;\n  }),\n  neq: infix(function (a, b) {\n    return a != b;\n  })\n};\n\nvar AnimatedOperator = function (_AnimatedNode) {\n  _inherits(AnimatedOperator, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedOperator);\n\n  function AnimatedOperator(operator, input) {\n    var _this;\n\n    _classCallCheck(this, AnimatedOperator);\n\n    invariant(typeof operator === 'string', \"Reanimated: Animated.operator node first argument should be of type String, but got: \".concat(operator));\n    invariant(input.every(function (el) {\n      return el instanceof AnimatedNode || typeof el === 'string' || typeof el === 'number';\n    }), \"Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got \".concat(input));\n    _this = _super.call(this, {\n      type: 'op',\n      op: operator,\n      input: input\n    }, input);\n\n    _defineProperty(_assertThisInitialized(_this), \"_input\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_op\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_operation\", void 0);\n\n    _this._op = operator;\n    _this._input = input;\n    return _this;\n  }\n\n  _createClass(AnimatedOperator, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedOperator, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (!this._operation) {\n        this._operation = OPERATIONS[this._op];\n        invariant(this._operation, \"Illegal operator '%s'\", this._op);\n      }\n\n      return this._operation(this._input);\n    }\n  }]);\n\n  return AnimatedOperator;\n}(AnimatedNode);\n\nexport function createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new AnimatedOperator(name, args.map(adapt));\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,SAASC,GAAT;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT;;AAEA,SAASC,MAAT,CAAgBC,EAAhB,EAAoB;EAClB,OAAOC,eAAK;IAAA,OAAIA,KAAK,CAACF,MAANE,CAAa,UAACC,CAAD,EAAIC,CAAJ;MAAA,OAAUH,EAAE,CAACJ,GAAG,CAACM,CAAD,CAAJ,EAASN,GAAG,CAACO,CAAD,CAAZ,CAAZ;IAAA,CAAbF,CAAJ;EAAA,CAAZ;AACD;;AAED,SAASG,UAAT,CAAoBJ,EAApB,EAAwBK,YAAxB,EAAsC;EACpC,OAAOJ,eAAK;IAAA,OAAIA,KAAK,CAACF,MAANE,CAAa,UAACC,CAAD,EAAIC,CAAJ;MAAA,OAAUH,EAAE,CAACJ,GAAG,CAACM,CAAD,CAAJ,EAASN,GAAG,CAACO,CAAD,CAAZ,CAAZ;IAAA,CAAbF,EAA2CI,YAA3CJ,CAAJ;EAAA,CAAZ;AACD;;AAED,SAASK,KAAT,CAAeN,EAAf,EAAmB;EACjB,OAAOC,eAAK;IAAA,OAAID,EAAE,CAACJ,GAAG,CAACK,KAAK,CAAC,CAAD,CAAN,CAAJ,EAAgBL,GAAG,CAACK,KAAK,CAAC,CAAD,CAAN,CAAnB,CAAN;EAAA,CAAZ;AACD;;AAED,SAASM,MAAT,CAAgBP,EAAhB,EAAoB;EAClB,OAAOC,eAAK;IAAA,OAAID,EAAE,CAACJ,GAAG,CAACK,KAAK,CAAC,CAAD,CAAN,CAAJ,CAAN;EAAA,CAAZ;AACD;;AAED,IAAMO,UAAU,GAAG;EAEjBC,GAAG,EAAEV,MAAM,CAAC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAD,CAFM;EAGjBO,GAAG,EAAEX,MAAM,CAAC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAD,CAHM;EAIjBQ,QAAQ,EAAEZ,MAAM,CAAC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAD,CAJC;EAKjBS,MAAM,EAAEb,MAAM,CAAC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAD,CALG;EAMjBU,GAAG,EAAEd,MAAM,CAAC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUW,IAAI,CAACD,GAALC,CAASZ,CAATY,EAAYX,CAAZW,CAAV;EAAA,CAAD,CANM;EAOjBC,MAAM,EAAEhB,MAAM,CAAC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAU,CAAED,CAAC,GAAGC,CAAJD,GAASC,CAAX,IAAgBA,CAA1B;EAAA,CAAD,CAPG;EAQjBa,IAAI,EAAET,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACE,IAALF,CAAUZ,CAAVY,CAAJ;EAAA,CAAF,CARK;EASjBG,GAAG,EAAEV,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACG,GAALH,CAASZ,CAATY,CAAJ;EAAA,CAAF,CATM;EAUjBI,GAAG,EAAEX,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACI,GAALJ,CAASZ,CAATY,CAAJ;EAAA,CAAF,CAVM;EAWjBK,GAAG,EAAEZ,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACK,GAALL,CAASZ,CAATY,CAAJ;EAAA,CAAF,CAXM;EAYjBM,GAAG,EAAEb,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACM,GAALN,CAASZ,CAATY,CAAJ;EAAA,CAAF,CAZM;EAajBO,IAAI,EAAEd,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACO,IAALP,CAAUZ,CAAVY,CAAJ;EAAA,CAAF,CAbK;EAcjBQ,IAAI,EAAEf,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACQ,IAALR,CAAUZ,CAAVY,CAAJ;EAAA,CAAF,CAdK;EAejBS,IAAI,EAAEhB,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACS,IAALT,CAAUZ,CAAVY,CAAJ;EAAA,CAAF,CAfK;EAgBjBU,GAAG,EAAEjB,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACU,GAALV,CAASZ,CAATY,CAAJ;EAAA,CAAF,CAhBM;EAiBjBW,KAAK,EAAElB,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACW,KAALX,CAAWZ,CAAXY,CAAJ;EAAA,CAAF,CAjBI;EAkBjBY,GAAG,EAAEnB,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACY,GAALZ,CAASZ,CAATY,CAAJ;EAAA,CAAF,CAlBM;EAmBjBa,IAAI,EAAEpB,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACa,IAALb,CAAUZ,CAAVY,CAAJ;EAAA,CAAF,CAnBK;EAoBjBc,KAAK,EAAErB,MAAM,CAACL,WAAC;IAAA,OAAIY,IAAI,CAACc,KAALd,CAAWZ,CAAXY,CAAJ;EAAA,CAAF,CApBI;EAqBjBe,GAAG,EAAE9B,MAAM,CAAC,UAACG,CAAD,EAAGC,CAAH;IAAA,OAASW,IAAI,CAACe,GAALf,CAASZ,CAATY,EAAYX,CAAZW,CAAT;EAAA,CAAD,CArBM;EAsBjBgB,GAAG,EAAE/B,MAAM,CAAC,UAACG,CAAD,EAAGC,CAAH;IAAA,OAASW,IAAI,CAACgB,GAALhB,CAASZ,CAATY,EAAYX,CAAZW,CAAT;EAAA,CAAD,CAtBM;EAyBjBiB,GAAG,EAAE3B,UAAU,CAAC,UAACF,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,IAAIC,CAAf;EAAA,CAAD,EAAmB,IAAnB,CAzBE;EA0BjB6B,EAAE,EAAE5B,UAAU,CAAC,UAACF,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,IAAIC,CAAf;EAAA,CAAD,EAAmB,KAAnB,CA1BG;EA2BjB8B,GAAG,EAAE1B,MAAM,CAACL,WAAC;IAAA,OAAI,CAACA,CAAL;EAAA,CAAF,CA3BM;EA4BjBgC,OAAO,EAAE3B,MAAM,CAACL,WAAC;IAAA,OAAIA,CAAC,KAAK,IAANA,IAAcA,CAAC,KAAKiC,SAApBjC,IAAiC,CAACkC,KAAK,CAAClC,CAAD,CAA3C;EAAA,CAAF,CA5BE;EA+BjBmC,QAAQ,EAAE/B,KAAK,CAAC,UAACJ,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAD,CA/BE;EAiCjBmC,EAAE,EAAEhC,KAAK,CAAC,UAACJ,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,IAAIC,CAAf;EAAA,CAAD,CAjCQ;EAkCjBoC,WAAW,EAAEjC,KAAK,CAAC,UAACJ,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAD,CAlCD;EAmCjBqC,QAAQ,EAAElC,KAAK,CAAC,UAACJ,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,IAAIC,CAAf;EAAA,CAAD,CAnCE;EAoCjBsC,WAAW,EAAEnC,KAAK,CAAC,UAACJ,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,IAAIC,CAAf;EAAA,CAAD,CApCD;EAsCjBuC,GAAG,EAAEpC,KAAK,CAAC,UAACJ,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,IAAIC,CAAf;EAAA,CAAD;AAtCO,CAAnB;;IAyCMwC,gB;;;;;EAKJC,0BAAYC,QAAZD,EAAsB3C,KAAtB2C,EAA6B;IAAA;;IAAA;;IAC3B/C,SAAS,CACP,OAAOgD,QAAP,KAAoB,QADb,iGAEiFA,QAFjF,EAAThD;IAIAA,SAAS,CACPI,KAAK,CAAC6C,KAAN7C,CACE8C,YAAE;MAAA,OACAA,EAAE,YAAYpD,YAAdoD,IACA,OAAOA,EAAP,KAAc,QADdA,IAEA,OAAOA,EAAP,KAAc,QAHd;IAAA,CADJ9C,CADO,oIAOoHA,KAPpH,EAATJ;IASA,0BACE;MAAEmD,IAAI,EAAE,IAAR;MAAcC,EAAE,EAAEJ,QAAlB;MAA4B5C;IAA5B,CADF,EAEEA,KAFF;;IAd2BiD;;IAAAA;;IAAAA;;IAkB3B,MAAKC,GAAL,GAAWN,QAAX;IACA,MAAKO,MAAL,GAAcnD,KAAd;IAnB2B;EAoB5B;;;;WAEDoD,oBAAW;MACT,uCAAgC,KAAKC,QAArC;IACD;;;WAEDC,wBAAe;MACb,IAAI,CAAC,KAAKC,UAAV,EAAsB;QACpB,KAAKA,UAAL,GAAkBhD,UAAU,CAAC,KAAK2C,GAAN,CAA5B;QACAtD,SAAS,CAAC,KAAK2D,UAAN,2BAA2C,KAAKL,GAAhD,CAATtD;MACD;;MACD,OAAO,KAAK2D,UAAL,CAAgB,KAAKJ,MAArB,CAAP;IACD;;;;EArC4BzD,Y;;AAwC/B,OAAO,SAAS8D,sBAAT,CAAgCC,IAAhC,EAAsC;EAC3C,OAAO;IAAA,kCAAIC,IAAJ;MAAIA,IAAJ;IAAA;;IAAA,OAAa,IAAIhB,gBAAJ,CAAqBe,IAArB,EAA2BC,IAAI,CAACC,GAALD,CAAS7D,KAAT6D,CAA3B,CAAb;EAAA,CAAP;AACD","names":["AnimatedNode","val","invariant","adapt","reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","constructor","operator","every","el","type","op","_defineProperty","_op","_input","toString","__nodeID","__onEvaluate","_operation","createAnimatedOperator","name","args","map"],"sources":["AnimatedOperator.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a,b) => Math.max(a, b)),\n  min: reduce((a,b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super(\n      { type: 'op', op: operator, input },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}