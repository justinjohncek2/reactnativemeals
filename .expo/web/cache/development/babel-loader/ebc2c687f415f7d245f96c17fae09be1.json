{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport AnimatedClock from \"./AnimatedClock\";\nimport { val } from \"../val\";\nexport var AnimatedParam = function (_AnimatedNode) {\n  _inherits(AnimatedParam, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedParam);\n\n  function AnimatedParam() {\n    var _this;\n\n    _classCallCheck(this, AnimatedParam);\n\n    _this = _super.call(this, {\n      type: 'param'\n    }, []);\n\n    _defineProperty(_assertThisInitialized(_this), \"argsStack\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_prevCallID\", void 0);\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedParam, [{\n    key: \"beginContext\",\n    value: function beginContext(ref, prevCallID) {\n      this._prevCallID = prevCallID;\n      this.argsStack.push(ref);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.argsStack.pop();\n    }\n  }, {\n    key: \"_getTopNode\",\n    value: function _getTopNode() {\n      if (this.argsStack.length === 0) throw new Error(\"param: Invocation failed because argsStack is empty\");\n      var top = this.argsStack[this.argsStack.length - 1];\n      return top;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var top = this._getTopNode();\n\n      if (top.setValue) {\n        var callID = getCallID();\n        setCallID(this._prevCallID);\n        top.setValue(value);\n        setCallID(callID);\n      } else {\n        throw new Error(\"param: setValue(\".concat(value, \") failed because the top element has no known method for updating it's current value.\"));\n      }\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var callID = getCallID();\n      setCallID(this._prevCallID);\n\n      var top = this._getTopNode();\n\n      var value = val(top);\n      setCallID(callID);\n      return value;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var node = this._getTopNode();\n\n      invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n      node.start();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var node = this._getTopNode();\n\n      invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n      node.stop();\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      var node = this._getTopNode();\n\n      if (node instanceof AnimatedParam) {\n        return node.isRunning();\n      }\n\n      invariant(node instanceof AnimatedClock, \"param: top node should be of type AnimatedClock but got \".concat(node));\n      return node.isStarted();\n    }\n  }]);\n\n  return AnimatedParam;\n}(AnimatedNode);\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,IAAuBC,SAAvB,EAAkCC,SAAlC;AACA,OAAOC,aAAP;AACA,SAASC,GAAT;AAEA,WAAaC,aAAb;EAAA;;EAAA;;EAIEC,yBAAc;IAAA;;IAAA;;IACZ,0BAAM;MAAEC,IAAI,EAAE;IAAR,CAAN,EAAyB,EAAzB;;IADYC,4DAHF,EAGE;;IAAAA;;IAEZ,MAAKC,QAAL;;IAFY;EAGb;;EAPH;IAAA;IAAA,OASEC,sBAAaC,GAAbD,EAAkBE,UAAlBF,EAA8B;MAC5B,KAAKG,WAAL,GAAmBD,UAAnB;MACA,KAAKE,SAAL,CAAeC,IAAf,CAAoBJ,GAApB;IACD;EAZH;IAAA;IAAA,OAcEK,sBAAa;MACX,KAAKF,SAAL,CAAeG,GAAf;IACD;EAhBH;IAAA;IAAA,OAkBEC,uBAAc;MACZ,IAAI,KAAKJ,SAAL,CAAeK,MAAf,KAA0B,CAA9B,EAAiC,MAAM,IAAIC,KAAJ,uDAAN;MACjC,IAAMC,GAAG,GAAG,KAAKP,SAAL,CAAe,KAAKA,SAAL,CAAeK,MAAf,GAAwB,CAAvC,CAAZ;MACA,OAAOE,GAAP;IACD;EAtBH;IAAA;IAAA,OAwBEC,kBAASC,KAATD,EAAgB;MACd,IAAMD,GAAG,GAAG,KAAKH,WAAL,EAAZ;;MACA,IAAIG,GAAG,CAACC,QAAR,EAAkB;QAChB,IAAME,MAAM,GAAGvB,SAAS,EAAxB;QACAC,SAAS,CAAC,KAAKW,WAAN,CAATX;QACAmB,GAAG,CAACC,QAAJD,CAAaE,KAAbF;QACAnB,SAAS,CAACsB,MAAD,CAATtB;MAJF,OAKO;QACL,MAAM,IAAIkB,KAAJ,2BAA6BG,KAA7B,2FAAN;MACD;IACF;EAlCH;IAAA;IAAA,OAoCEE,wBAAe;MACb,IAAMD,MAAM,GAAGvB,SAAS,EAAxB;MACAC,SAAS,CAAC,KAAKW,WAAN,CAATX;;MACA,IAAMmB,GAAG,GAAG,KAAKH,WAAL,EAAZ;;MACA,IAAMK,KAAK,GAAGnB,GAAG,CAACiB,GAAD,CAAjB;MACAnB,SAAS,CAACsB,MAAD,CAATtB;MACA,OAAOqB,KAAP;IACD;EA3CH;IAAA;IAAA,OA6CEG,iBAAQ;MACN,IAAMC,IAAI,GAAG,KAAKT,WAAL,EAAb;;MACAnB,SAAS,CACP4B,IAAI,YAAYxB,aAAhBwB,IAAiCA,IAAI,YAAYtB,aAD1C,oEAEoDsB,IAFpD,EAAT5B;MAIA4B,IAAI,CAACD,KAALC;IACD;EApDH;IAAA;IAAA,OAsDEC,gBAAO;MACL,IAAMD,IAAI,GAAG,KAAKT,WAAL,EAAb;;MACAnB,SAAS,CACP4B,IAAI,YAAYxB,aAAhBwB,IAAiCA,IAAI,YAAYtB,aAD1C,oEAEoDsB,IAFpD,EAAT5B;MAIA4B,IAAI,CAACC,IAALD;IACD;EA7DH;IAAA;IAAA,OA+DEE,qBAAY;MACV,IAAMF,IAAI,GAAG,KAAKT,WAAL,EAAb;;MAEA,IAAIS,IAAI,YAAYtB,aAApB,EAAmC;QACjC,OAAOsB,IAAI,CAACE,SAALF,EAAP;MACD;;MACD5B,SAAS,CACP4B,IAAI,YAAYxB,aADT,oEAEoDwB,IAFpD,EAAT5B;MAIA,OAAO4B,IAAI,CAACG,SAALH,EAAP;IACD;EA1EH;;EAAA;AAAA,EAAmC3B,YAAnC;AA6EA,OAAO,SAAS+B,mBAAT,GAA+B;EACpC,OAAO,IAAI1B,aAAJ,EAAP;AACD","names":["invariant","AnimatedNode","getCallID","setCallID","AnimatedClock","val","AnimatedParam","constructor","type","_defineProperty","__attach","beginContext","ref","prevCallID","_prevCallID","argsStack","push","endContext","pop","_getTopNode","length","Error","top","setValue","value","callID","__onEvaluate","start","node","stop","isRunning","isStarted","createAnimatedParam"],"sources":["AnimatedParam.js"],"sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport AnimatedClock from './AnimatedClock';\nimport { val } from '../val';\n\nexport class AnimatedParam extends AnimatedNode {\n  argsStack = [];\n  _prevCallID;\n  \n  constructor() {\n    super({ type: 'param' }, []);\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(`param: Invocation failed because argsStack is empty`);\n    const top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    const top = this._getTopNode();\n    if (top.setValue) {\n      const callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(`param: setValue(${value}) failed because the top element has no known method for updating it's current value.`)\n    }\n  }\n  \n  __onEvaluate() {\n    const callID = getCallID();\n    setCallID(this._prevCallID);\n    const top = this._getTopNode();\n    const value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.start();\n  }\n\n  stop() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.stop();\n  }\n\n  isRunning() {\n    const node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning()\n    }\n    invariant(\n      node instanceof AnimatedClock,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    return node.isStarted();\n  }\n}\n\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}\n"]},"metadata":{},"sourceType":"module"}